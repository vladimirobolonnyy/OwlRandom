apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 30
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.obolonnyy.owlrandom"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en"
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        alphaRelease {
            initWith debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "owl-random.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }
    composeOptions {
        kotlinCompilerVersion '1.4.0'
        kotlinCompilerExtensionVersion versions.compose_version
    }
//
//    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
//        kotlinOptions {
//            jvmTarget = "1.8"
//            freeCompilerArgs += ["-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check"]
//        }
//    }

    /**
     room.incremental: Enables Gradle incremental annotation proccesor.
     room.expandProjection: Configures Room to rewrite queries such that their top star projection
     is expanded to only contain the columns defined in the DAO method return type.
     */
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }
    }
    lintOptions {
        // if true, treat all warnings as errors
        warningsAsErrors true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
    implementation "com.google.android.material:material:$versions.material"
    implementation "com.afollestad.material-dialogs:core:$versions.material_dialog"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.arch}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.arch}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.1.1"
//    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'
    implementation "com.jakewharton.timber:timber:$versions.timber"

    implementation "androidx.multidex:multidex:$versions.multidex"

    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"
    implementation "android.arch.persistence.room:runtime:${versions.room}"
    kapt "android.arch.persistence.room:compiler:${versions.room}"

    implementation "com.squareup.moshi:moshi:${versions.moshi}"


    implementation "androidx.compose.ui:ui:${versions.compose_version}"
    implementation "androidx.compose.material:material:${versions.compose_version}"
    implementation "androidx.ui:ui-tooling:${versions.compose_version}"
    implementation "androidx.compose.runtime:runtime:${versions.compose_version}"
    implementation "androidx.compose.runtime:runtime-livedata:${versions.compose_version}"


    testImplementation 'junit:junit:4.13.1'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    /**
     * Google sheets
     */
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    // https://developers.google.com/gsuite/guides/android
    // https://mvnrepository.com/artifact/com.google.api-client/google-api-client-android
    implementation('com.google.api-client:google-api-client-android:1.28.0') {
        exclude group: 'org.apache.httpcomponents'
        exclude module: 'guava-jdk5'
    }
    // https://mvnrepository.com/artifact/com.google.apis/google-api-services-sheets
    implementation('com.google.apis:google-api-services-sheets:v4-rev571-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
        exclude module: 'guava-jdk5'
    }

    /**
     * retrofin
     */
    //todo clean up
//Import okHttp dependencies
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

//Import Retrofit dependencies
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    implementation("io.coil-kt:coil:1.0.0")


}
